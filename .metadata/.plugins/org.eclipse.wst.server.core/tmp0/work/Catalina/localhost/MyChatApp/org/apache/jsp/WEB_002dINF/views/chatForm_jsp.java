/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.24
 * Generated at: 2018-01-12 08:49:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"></script>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Chat Room</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"margin-left: 30px;\">\r\n");
      out.write("\t<h3>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.username }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("\t\t| <a href=\"chat/logout\" style=\"text-decoration: none\">Logout</a>\r\n");
      out.write("\t</h3>\r\n");
      out.write("\t<i class=\"glyphicon glyphicon-user\"></i>\r\n");
      out.write("\t<span id=\"countUser\"></span>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<textarea rows=\"10\" cols=\"45\" disabled=\"disabled\" id=\"frameChat\"></textarea>\r\n");
      out.write("\t<textarea rows=\"10\" cols=\"10\" disabled=\"disabled\" id=\"usersChat\"></textarea>\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t<input type=\"text\" id=\"messageText\" />\r\n");
      out.write("\t<button onclick=\"sendMessage();\">Send</button>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("\tvar websocket = new WebSocket(\"ws://localhost:8080/MyChatApp/mychatendpoint\");\r\n");
      out.write("\twebsocket.onmessage = function processMessage(message) {\r\n");
      out.write("\t\tvar jsonData = JSON.parse(message.data);\r\n");
      out.write("\t\tconsole.log(jsonData);\r\n");
      out.write("\t\tif(jsonData.users!=null){\r\n");
      out.write("\t\t\tusersChat.value = \"\";\r\n");
      out.write("\t\t\tvar i =0;\r\n");
      out.write("\t\t\twhile(i<jsonData.users.length) usersChat.value += jsonData.users[i++] +\"\\n\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (jsonData.count != null) {\r\n");
      out.write("\t\t\t$('#countUser').html(jsonData.count);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (jsonData.system != null) {\r\n");
      out.write("\t\t\tframeChat.value += jsonData.system + \"\\n\";\r\n");
      out.write("\t\t} else if (jsonData.message != null)\r\n");
      out.write("\t\t\tframeChat.value += jsonData.message + \"\\n\";\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction sendMessage() {\r\n");
      out.write("\t\tvar message = $(\"#messageText\").val();\r\n");
      out.write("\t\twebsocket.send(message);\r\n");
      out.write("\t\t$(\"#messageText\").val(\"\");\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
